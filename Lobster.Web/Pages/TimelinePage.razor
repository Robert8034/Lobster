@page "/timeline"
@using Lobster.Core.Models.Follows
@inject NavigationManager NavigationManager
@inject IPostingService PostingService
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IFollowService FollowService
@inject IUserService UserService

<h3>Timeline</h3>

<Button Title="Create New Post" OnClick="@NavigateToNewPostForm" Enabled="true"></Button>

@if (timelinePosts == null)
{
    <p1>It's pretty empty here... Start following some people?</p1>
}

else
{
    <Timeline>
        @foreach (var post in timelinePosts)
        {
             
        <Card>
            <Paragraph OnClick="@(() => NavigateToUser(timelineUsers.Find(e => e.Id == post.UserId).Id))" Text="@timelineUsers.Find(e => e.Id == post.UserId).Username"></Paragraph>
            <p1>@post.Content</p1><br />
            <p1>Date: @post.PostDate</p1><br />
            <p1>Likes: @post.Likes.Count                      Reactions: @post.Reactions.Count</p1> 
          
        </Card>

        }
    </Timeline>
}

@code {

    private List<Post> timelinePosts;
    private List<User> timelineUsers;

    protected override async Task OnInitializedAsync()
    {
        int userId = await localStorage.GetItemAsync<int>("userId");
        List<Follow> follows = await FollowService.GetFollows(userId);
        timelinePosts = await PostingService.GenerateTimeline(userId);
        timelineUsers = await UserService.GetTimelineUsers(follows);

    }

    private Task NavigateToNewPostForm()
    {
        NavigationManager.NavigateTo("/createpost");
        return Task.CompletedTask;
    }

    private Task NavigateToUser(int userId)
    {
        NavigationManager.NavigateTo("/users/" + userId);
        return Task.CompletedTask;
    }
}

