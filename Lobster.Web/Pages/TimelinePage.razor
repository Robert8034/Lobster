@page "/timeline"
@using Lobster.Core.Models.Follows
@inject NavigationManager NavigationManager
@inject IPostingService PostingService
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject IFollowService FollowService
@inject IUserService UserService
@inject ILikingService LikingService

<h3>Timeline</h3>

<Button Title="Create New Post" OnClick="@NavigateToNewPostForm" Enabled="true" Size="ButtonSize.Big"></Button>
<br/>
<br/>
@if (timelinePosts == null)
{
    <p1>It's pretty empty here... Start following some people?</p1>
}

else
{
    <Timeline>
        @foreach (var post in timelinePosts)
        {
            string reactionText = "Reactions: " + post.Reactions.Count;

        <Card>
            <Paragraph OnClick="@(() => NavigateToUser(timelineUsers.Find(e => e.Id == post.UserId).Id))" Text="@timelineUsers.Find(e => e.Id == post.UserId).Username"></Paragraph>
            <p1>@post.Content</p1><br />
            <p1>Date: @post.PostDate</p1><br />
            <p1>Likes: @post.Likes.Count                      <Paragraph Text="@reactionText" OnClick="@(() => NavigateToPostPage(post.Id))" ></Paragraph></p1>
            @if (post.Likes.Find(e => e.UserId == UserId) == null)
            {
                <Button Title="Like" OnClick="@(() => LikePost(post.Id))" Enabled="true"></Button>
            }
            else
            {
                <Button Title="Unlike" OnClick="@(() => RemoveLike(post.Id))" Enabled="true"></Button>
            }
            <br/>
            <Button Title="Comment" OnClick="@(() => CommentPost(post.Id))" Enabled="true"></Button>

        </Card>
        }
    </Timeline>
}

@code {

    private List<Post> timelinePosts;
    private List<User> timelineUsers;
    private int UserId;

    protected override async Task OnInitializedAsync()
    {
        UserId = await localStorage.GetItemAsync<int>("userId");
        List<Follow> follows = await FollowService.GetFollows(UserId);
        timelinePosts = await PostingService.GenerateTimeline(UserId);
        timelineUsers = await UserService.GetTimelineUsers(follows);
    }

    private Task NavigateToNewPostForm()
    {
        NavigationManager.NavigateTo("/createpost");
        return Task.CompletedTask;
    }

    private Task NavigateToUser(int userId)
    {
        NavigationManager.NavigateTo("/users/" + userId);
        return Task.CompletedTask;
    }

    private async Task LikePost(int postId)
    {
        Post post = await LikingService.LikePost(UserId, postId);
        timelinePosts.Find(e => e.Id == postId).Likes = post.Likes;
        StateHasChanged();
    }

    private async Task RemoveLike(int postId)
    {
        Post post = await LikingService.RemoveLike(UserId, postId);
        timelinePosts.Find(e => e.Id == postId).Likes = post.Likes;
        StateHasChanged();
    }

    private Task CommentPost(int postId)
    {
        NavigationManager.NavigateTo("/posts/" + postId + "/comment");
        return Task.CompletedTask;
    }

    private Task NavigateToPostPage(int postId)
    {
        NavigationManager.NavigateTo("/posts/" + postId);
        return Task.CompletedTask;
    }
}

